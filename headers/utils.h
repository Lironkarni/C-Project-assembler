#ifndef FILE_COPY_H
#define FILE_COPY_H

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#define MAX_LINE_LENGTH 1024 /**< Maximum length of a line in the source file */

/**
 * @brief List of directive keywords in assembly.
 *
 * These are special keywords that indicate data-related instructions.
 */
static const char *directive_words[] = { "data", "string", "extern", "entry" };

/**
 * @brief Number of directive keywords in the assembler.
 */
static const int directive_count = sizeof(directive_words) / sizeof(directive_words[0]);

/**
 * @brief Represents a macro in the pre-assembler.
 *
 * This struct holds the macro name, its content (stored as a dynamic array of lines),
 * the number of lines in the macro, and a pointer to the next macro in a linked list.
 */
typedef struct Macro {
    char *name;             /**< Name of the macro (allocated dynamically) */
    char **content;         /**< Array of lines containing the macro's content */
    int line_count;         /**< Number of lines in the macro */
    struct Macro *next;     /**< Pointer to the next macro in the linked list */
} Macro;

/**
 * @brief Represents a line of the source file.
 *
 * This struct holds information about a line in the source file, including its
 * file name, content, and line number.
 */
typedef struct Line {
    char *file_name;   /**< Name of the source file */
    char *data;        /**< The actual content of the line */
    int line_number;   /**< Line number in the source file */
} Line;

/**
 * @brief Adds a new macro to the macro list.
 *
 * This function creates and stores a macro with the given name and content.
 *
 * @param name The name of the macro.
 * @param content An array of strings containing the macro's content.
 * @param line_count The number of lines in the macro.
 */
void add_macro(const char *name, char **content, int line_count);

/**
 * @brief Finds a macro by name.
 *
 * This function searches for a macro in the macro list.
 *
 * @param name The name of the macro to find.
 * @return A pointer to the `Macro` struct if found, otherwise NULL.
 */
Macro *find_macro(const char *name);

/**
 * @brief Removes extra spaces from a line.
 *
 * This function trims leading, trailing, and excessive spaces within a line.
 *
 * @param line The line to clean.
 */
void remove_extra_spaces(char *line);

/**
 * @brief Runs the pre-assembler phase.
 *
 * This function processes macros and expands them in the assembly source file.
 *
 * @param filename The name of the source file.
 */
void pre_assembler(const char *filename);

/**
 * @brief Loads the content of a file into memory.
 *
 * This function reads the entire content of a file into a dynamically allocated string.
 *
 * @param filename The name of the file to load.
 * @return A dynamically allocated string containing the file's content.
 */
char *load_file(char *filename);

/**
 * @brief Checks if a line is empty or consists only of whitespace.
 *
 * @param line The line to check.
 * @return Returns 1 if the line is empty, otherwise 0.
 */
int is_empty_line(const char *line);

/**
 * @brief Frees memory allocated for stored macros.
 *
 * This function releases all dynamically allocated memory related to macros.
 */
void free_macros();

/**
 * @brief Checks if a macro name is valid.
 *
 * This function verifies that a macro name follows naming conventions.
 *
 * @param macro_name The macro name to validate.
 * @param filename The source file where the macro is defined.
 * @param line The line number where the macro appears.
 * @return Returns 1 if the macro name is valid, otherwise 0.
 */
int is_valid_macro_name(char *macro_name, const char *filename, int line);

/**
 * @brief Validates the end of a macro definition.
 *
 * This function checks if the `endmacro` directive is correctly placed in the source file.
 *
 * @param line The current line being processed.
 * @param filename The name of the source file.
 * @param line_count The current line number in the source file.
 * @return Returns 1 if the `endmacro` directive is valid, otherwise 0.
 */
int is_valid_macro_end(char *line, const char *filename, int line_count);

/**
 * @brief Deletes the `.am` file generated by the pre-assembler.
 *
 * This function removes the intermediate pre-processed assembly file.
 *
 * @param filename The base filename (without the `.am` extension).
 */
void delete_am_file(const char *filename);

/**
 * @brief Creates a new `Line` structure.
 *
 * This function allocates and initializes a new `Line` structure for processing.
 *
 * @param temp_line The content of the line.
 * @param file The name of the source file.
 * @param line_number The line number in the source file.
 * @return A pointer to the newly created `Line` structure.
 */
Line *create_line(char* temp_line, char* file, int line_number);

/**
 * @brief Checks if extraneous text exists after a command.
 *
 * This function determines if a command is followed by unnecessary text, which could indicate a syntax error.
 *
 * @param command The command to analyze.
 * @return Returns 1 if extraneous text is found, otherwise 0.
 */
int extraneous_text(char *command);

#endif /* FILE_COPY_H */
